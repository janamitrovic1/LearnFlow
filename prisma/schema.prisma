// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String
  image     String @default("/empty_profile.png")
  quizzes   Quiz[]  @relation("TeacherQuizzes")
  questions Question[]  @relation("TeacherQuestions")
  classes   Class[] @relation("TeacherClasses")
}

model Student {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String
  image     String @default("/empty_profile.png")
  quizzes   StudentQuiz[] @relation("StudentQuizzes")
  studentClass StudentClass[] @relation("StudentClass")
}

model Quiz {
  id String @id @default(uuid())
  teacherId String
  name String
  isPrivate Boolean
  teacher   Teacher     @relation("TeacherQuizzes", fields: [teacherId], references: [id])
  students StudentQuiz[] @relation("QuizStudents")
  questions Question[]   @relation("QuizQuestions")
}

model StudentQuiz {
  studentId String
  quizId String
  student Student @relation("StudentQuizzes", fields: [studentId], references: [id])
  quiz Quiz @relation("QuizStudents", fields: [quizId], references: [id])
  @@id([studentId, quizId])
}

enum QuestionType {
  INPUT
  RADIO
  CHECK
}
model Question {
  id          String     @id @default(uuid())
  teacherId   String
  quizId      String
  text        String
  questionType QuestionType
  teacher     Teacher    @relation("TeacherQuestions", fields: [teacherId], references: [id])
  responses   Response[] @relation("QuestionResponses")
  answers     Answer[]   @relation("QuestionAnswers")
  quiz        Quiz       @relation("QuizQuestions", fields: [quizId], references: [id])     
}

model Response {
  id          String     @id @default(uuid())
  questionId  String
  text        String
  question    Question   @relation("QuestionResponses", fields: [questionId], references: [id])
  answers     Answer[]   @relation("ResponseAnswers")
}

model Answer {
  questionId  String     
  responseId  String     
  question    Question   @relation("QuestionAnswers", fields: [questionId], references: [id])
  response    Response   @relation("ResponseAnswers", fields: [responseId], references: [id])
  @@id([questionId, responseId])
}

model Class {
  id String @id @default(uuid())
  teacherId String
  name String
  teacher Teacher @relation("TeacherClasses", fields: [teacherId], references: [id])
  studentClass StudentClass[] @relation("ClassStudent")
}

model StudentClass{
  classId String
  studentId String
  class Class @relation("ClassStudent", fields: [classId], references: [id])
  student Student @relation("StudentClass", fields: [studentId], references: [id])
  @@id([classId, studentId])
}